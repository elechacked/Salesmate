import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:salesmate/features/superadmin/controllers/super_company_controller.dart';
import 'package:salesmate/features/superadmin/domain/entities/company_entity.dart';
import 'package:salesmate/app/themes/app_colors.dart';
import 'package:salesmate/app/themes/app_text_styles.dart';

class CompanyCreateScreen extends StatefulWidget {
  const CompanyCreateScreen({super.key});

  @override
  State<CompanyCreateScreen> createState() => _CompanyCreateScreenState();
}

class _CompanyCreateScreenState extends State<CompanyCreateScreen> {
  final _formKey = GlobalKey<FormState>();
  final _controller = Get.find<SuperCompanyController>();
  late DateTime _subscriptionExpiry;
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _ownerEmailController = TextEditingController();
  final TextEditingController _maxUsersController = TextEditingController(text: '10');
  final TextEditingController _gstController = TextEditingController();
  final TextEditingController _natureController = TextEditingController();
  final TextEditingController _contactController = TextEditingController();
  final TextEditingController _addressController = TextEditingController();
  final TextEditingController _websiteController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _subscriptionExpiry = DateTime.now().add(const Duration(days: 365));
  }

  @override
  void dispose() {
    _nameController.dispose();
    _ownerEmailController.dispose();
    _maxUsersController.dispose();
    _gstController.dispose();
    _natureController.dispose();
    _contactController.dispose();
    _addressController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  Future<void> _selectExpiryDate() async {
    final pickedDate = await showDatePicker(
      context: context,
      initialDate: _subscriptionExpiry,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365 * 5)),
    );
    if (pickedDate != null) {
      setState(() {
        _subscriptionExpiry = pickedDate;
      });
    }
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      final company = CompanyEntity(
        id: '', // Will be auto-generated by Firestore
        name: _nameController.text,
        ownerEmail: _ownerEmailController.text,
        maxUsers: int.parse(_maxUsersController.text),
        subscriptionExpiry: _subscriptionExpiry,
        isActive: true,
        createdAt: DateTime.now(),
        logoUrl: null,
        natureOfBusiness: _natureController.text.isEmpty ? null : _natureController.text,
        gstNumber: _gstController.text.isEmpty ? null : _gstController.text,
        contactNumber: _contactController.text.isEmpty ? null : _contactController.text,
        address: _addressController.text.isEmpty ? null : _addressController.text,
        website: _websiteController.text.isEmpty ? null : _websiteController.text,
      );

      _controller.createCompany(company);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Create Company', style: AppTextStyles.heading),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
            // Company Name
            TextFormField(
            controller: _nameController,
            decoration: const InputDecoration(
              labelText: 'Company Name*',
              border: OutlineInputBorder(),
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter company name';
              }
              if (value.length < 3) {
                return 'Minimum 3 characters required';
              }
              return null;
            },
          ),
          const SizedBox(height: 16),

          // Owner Email
          TextFormField(
            controller: _ownerEmailController,
            decoration: const InputDecoration(
              labelText: 'Owner Email*',
              border: OutlineInputBorder(),
            ),
            keyboardType: TextInputType.emailAddress,
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter owner email';
              }
              if (!value.contains('@')) {
                return 'Please enter a valid email';
              }
              return null;
            },
          ),
          const SizedBox(height: 16),

          // Max Users
          TextFormField(
            controller: _maxUsersController,
            decoration: const InputDecoration(
              labelText: 'Max Users*',
              border: OutlineInputBorder(),
            ),
            keyboardType: TextInputType.number,
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter max users';
              }
              if (int.tryParse(value) == null) {
                return 'Please enter a valid number';
              }
              return null;
            },
          ),
          const SizedBox(height: 16),

          // Subscription Expiry
          ListTile(
            title: const Text('Subscription Expiry'),
            subtitle: Text(
              DateFormat('yyyy-MM-dd').format(_subscriptionExpiry),
            ),
              trailing: const Icon(Icons.calendar_today),
              onTap: _selectExpiryDate,
            ),
            const Divider(),

            const SizedBox(height: 16),

            // GST Number
            TextFormField(
              controller: _gstController,
              decoration: const InputDecoration(
                labelText: 'GST Number',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),

            // Nature of Business
            TextFormField(
              controller: _natureController,
              decoration: const InputDecoration(
                labelText: 'Nature of Business',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),

            // Contact Number
            TextFormField(
              controller: _contactController,
              decoration: const InputDecoration(
                labelText: 'Contact Number',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.phone,
            ),
            const SizedBox(height: 16),

            // Address
            TextFormField(
              controller: _addressController,
              decoration: const InputDecoration(
                labelText: 'Address',
                border: OutlineInputBorder(),
              ),
              maxLines: 3,
            ),
            const SizedBox(height: 16),

            // Website
            TextFormField(
              controller: _websiteController,
              decoration: const InputDecoration(
                labelText: 'Website',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.url,
            ),
            const SizedBox(height: 24),

            // Submit Button
            Obx(() {
              return ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.primaryColor,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                onPressed: _controller.isLoading ? null : _submitForm,
                child: _controller.isLoading
                    ? const CircularProgressIndicator(color: Colors.white)
                    : Text(
                  'Create Company',
                  style: AppTextStyles.buttonText,
                ),
              );
            }),
            ],
          ),
        ),
      ),
    );
  }
}